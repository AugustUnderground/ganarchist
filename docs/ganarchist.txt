-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Switching loss prediction of High-Voltage GaN Half-Bridges
--   
--   Please see the README on GitHub at
--   <a>https://github.com/augustunderground/ganarchist#readme</a>
@package ganarchist
@version 0.1.0.0


-- | Hyper Parameters of Net
module HyperParameters

-- | Activation Function is Torch.mish
φ :: Tensor -> Tensor

-- | Learning Rate
α :: Double

-- | Learning Rate as Torch.Tensor
α' :: Tensor

-- | Estimated Moment Decay
β1 :: Double

-- | Estimated Moment Decay
β2 :: Double

-- | Batch Size
bs' :: Int

-- | Type Alias for Adam C++ Optimizer
type Optim = CppOptimizerState AdamOptions

-- | Default Optimizer Options
opt' :: AdamOptions


-- | Utilies for Training Transistor Models
module Lib

-- | Lift State into StateT
liftState :: forall m s a. Monad m => State s a -> StateT s m a

-- | Split Tensor into List of GPU Tensors
splitBatches :: Int -> Tensor -> [Tensor]
readCSV :: FilePath -> IO ([String], Tensor)

-- | Load all Transistor CSVs from a file path and concatenate them
loadCSVs :: FilePath -> IO ([String], Tensor)

-- | Read data from TXT file
readTSV :: FilePath -> IO ([String], Tensor)

-- | Available Transistors
data Transistor

-- | GaN Systems GS66502B
GS66502B :: Transistor

-- | GaN Systems GS66504B
GS66504B :: Transistor

-- | GaN Systems GS66506T
GS66506T :: Transistor

-- | GaN Systems GS66508T
GS66508T :: Transistor

-- | GaN Systems GS66516T
GS66516T :: Transistor

-- | Default CPU Device
cpu :: Device

-- | Default GPU Device
gpu :: Device

-- | Torch.indexSelect but with a boolean mask
maskSelect :: Int -> Tensor -> Tensor -> Tensor

-- | Torch.indexSelect' but with a boolean mask
maskSelect' :: Int -> [Bool] -> Tensor -> Tensor

-- | Select columns based in strings in string list
headerSelect :: [String] -> [String] -> Tensor -> Tensor

-- | Scale Torch.Tensor to [0,1] given a min and max
scale :: Tensor -> Tensor -> Tensor -> Tensor

-- | Un-Scale Torch.Tensor from [0,1] given a min and max
scale' :: Tensor -> Tensor -> Tensor -> Tensor

-- | Create a model archive directory with time stamp and return path
createModelDir :: String -> IO String
instance GHC.Read.Read Lib.Transistor
instance GHC.Show.Show Lib.Transistor
instance GHC.Enum.Bounded Lib.Transistor
instance GHC.Enum.Enum Lib.Transistor
instance GHC.Classes.Eq Lib.Transistor


-- | Neural Network Definition
module Net

-- | Neural Network Specification
data NetSpec
NetSpec :: !Int -> !Int -> NetSpec

-- | Number of input neurons
[numX] :: NetSpec -> !Int

-- | Number of output neurons
[numY] :: NetSpec -> !Int

-- | Network Architecture
data Net
Net :: !Linear -> !Linear -> !Linear -> !Linear -> !Linear -> Net
[fc0] :: Net -> !Linear
[fc1] :: Net -> !Linear
[fc2] :: Net -> !Linear
[fc3] :: Net -> !Linear
[fc4] :: Net -> !Linear

-- | Neural Network Forward Pass with scaled Data
forward :: Net -> Tensor -> Tensor

-- | Remove Gradient for tracing / scripting
noGrad :: Parameterized f => f -> IO f

-- | Save Model and Optimizer Checkpoint
saveCheckPoint :: FilePath -> Net -> Optim -> IO ()

-- | Load a Saved Model and Optimizer CheckPoint
loadCheckPoint :: FilePath -> NetSpec -> IO (Net, Optim)

-- | Trace and Return a Script Module
traceModel :: Int -> [String] -> [String] -> (Tensor -> Tensor) -> IO ScriptModule

-- | Trace to Function
unTraceModel :: ScriptModule -> Tensor -> Tensor

-- | Save a Traced ScriptModule
saveInferenceModel :: FilePath -> ScriptModule -> IO ()

-- | Load a Traced ScriptModule
loadInferenceModel :: FilePath -> IO ScriptModule
instance GHC.Classes.Eq Net.NetSpec
instance GHC.Show.Show Net.NetSpec
instance Torch.NN.Parameterized Net.Net
instance GHC.Show.Show Net.Net
instance GHC.Generics.Generic Net.Net
instance Torch.NN.Randomizable Net.NetSpec Net.Net


-- | Statically Typed Model Training
module Run

-- | A single batch of Data
data Batch
Batch :: !Tensor -> !Tensor -> Batch

-- | Input Data
[$sel:xs:Batch] :: Batch -> !Tensor

-- | Output Data
[$sel:ys:Batch] :: Batch -> !Tensor

-- | Training State
data TrainState
TrainState :: !Int -> ![Tensor] -> ![Tensor] -> ![Float] -> ![Float] -> !Net -> !Optim -> !LearningRate -> !Int -> !FilePath -> ![String] -> ![String] -> TrainState

-- | Current Epoch
[$sel:epoch:TrainState] :: TrainState -> !Int

-- | Buffer for batch losses
[$sel:lossBuffer:TrainState] :: TrainState -> ![Tensor]

-- | Buffer for batch losses
[$sel:lossBuffer':TrainState] :: TrainState -> ![Tensor]

-- | Training Loss
[$sel:trainLoss:TrainState] :: TrainState -> ![Float]

-- | Validation Loss
[$sel:validLoss:TrainState] :: TrainState -> ![Float]

-- | Surrogate Model
[$sel:model:TrainState] :: TrainState -> !Net

-- | Optimizier
[$sel:optim:TrainState] :: TrainState -> !Optim

-- | Learning Rate
[$sel:learningRate:TrainState] :: TrainState -> !LearningRate

-- | Batch Size
[$sel:batchSize:TrainState] :: TrainState -> !Int

-- | Save Path
[$sel:modelPath:TrainState] :: TrainState -> !FilePath

-- | X Columns
[$sel:xParams:TrainState] :: TrainState -> ![String]

-- | Y Columns
[$sel:yParams:TrainState] :: TrainState -> ![String]

-- | Validation Step without gradient
validStep :: Net -> Batch -> Tensor

-- | Validation Epoch
validEpoch :: [Batch] -> StateT TrainState IO ()

-- | Training Step with Gradient
trainStep :: LearningRate -> Net -> Optim -> Batch -> IO (Net, Optim, Tensor)

-- | Training Epoch
trainEpoch :: [Batch] -> StateT TrainState IO ()

-- | Data Shuffler
shuffleData :: Tensor -> Tensor -> StateT TrainState IO [Batch]

-- | Training in State Monad
runTraining :: Tensor -> Tensor -> StateT TrainState IO Net

-- | Main Training Function
train :: Int -> IO ()
testModel :: [String] -> (Tensor -> Tensor) -> Tensor -> Tensor -> IO ()
instance GHC.Classes.Eq Run.Batch
instance GHC.Show.Show Run.Batch
